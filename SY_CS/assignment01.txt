Assignment 1: Searching Algorithm

Searching Algorithms are designed to check for an element or retrieve an element from any 
data structure where it is stored. Based on the type of search operation, these algorithms are 
generally classified into two categories:

        1. Sequential Search: In this, the list or array is traversed sequentially, and every element is 
            checked. For example: Linear Search.
        2. Interval Search: These algorithms are specifically designed for searching in sorted datastructures. These type of searching algorithms are much more efficient than Linear 
            Search as they repeatedly target the centre of the search structure and divide the search 
            space in half. For Example: Binary Search.

The data to be searched is in memory usually in an array. It could be an array of integers , 
characters, strings or of defined structure type. To test a sorting algorithm, we require large 
data set. Data is generated using random (rand()) function. The array of random integers in the 
range 0 to 99 is generated by using following code:


void generate( int * a , int n)
{ 
    int i;
    for(i=0; i<n; i++) 
    a[i]=rand()%100;
}

#Variable declarations & main program
typedef struct
    {
        char name[30];
        int age;
        int salary;
    } RECORD;

RECORD emp[100];
main()
    {
        int n;
        n=readFile(emp);
        sort(emp,n);
        writeFile(emp,n);
    }



Function for reading from a file
int readFile(RECORD *a)
{
    int i=0;
    FILE *fp;
    if((fp=fopen("emp.txt","r"))!=NULL)
    while(! feof(fp))
    {
        fscanf(fp,"%s%d%d", a[i].name,&a[i].age, &a[i].salary);
        i++;
    }
    return i-1; // number of records read
}
Function for writing to a file
void writeFile(RECORD *a, int n)
    {
        int i=0;
        FILE *fp;
        if((fp=fopen("sortedemp.txt","w"))!=NULL)
        for(i=0;i<n; i++)
        fprintf(fp,"%s\t%d\t%d\n", a[i].name,a[i].age, a[i].salary);
    }


